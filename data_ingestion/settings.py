"""
Django settings for data_ingestion project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from configuration.config import Config
from corsheaders.defaults import default_headers
import mysql.connector

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ai#9bb8(en1uo-3l-vmpludcwj^23@!@(a3y9rd6liacfsbz^='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'storages',
    'configuration',
    'authorization',
    'file_management',
    'file_templates',
    'ner_management',
    'users',
    'roles',
    'company',
    'project_config',
    'login',
    'structured_doc',
    'r2import',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL =False

CORS_ORIGIN_WHITELIST =Config.CORS_ORIGIN_WHITELIST

CORS_ALLOW_HEADERS =list(default_headers) + [
    'tenant-code'
    # '*'
]

ROOT_URLCONF = 'data_ingestion.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'data_ingestion.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': Config.DATABASE_ENGINE,
        'NAME': Config.DATABASE_NAME,
        'HOST': Config.DATABASE_HOST,
        'PORT': Config.DATABASE_PORT,
        'USER': Config.DATABASE_USER,
        'PASSWORD':Config.DATABASE_PASSWORD,
        'OPTIONS': {'init_command':"SET storage_engine=INNODB",'init_command': "SET sql_mode=STRICT_TRANS_TABLES"},
    }
}

mydb = mysql.connector.connect(
    host=Config.DATABASE_HOST,
    user=Config.DATABASE_USER,
    password=Config.DATABASE_PASSWORD,
    database=Config.DATABASE_NAME
)
mycursor = mydb.cursor()
mycursor.execute("SELECT * FROM TENANTS")
for tenant in mycursor:
    DATABASES[tenant[2]] = {
        'ENGINE': Config.DATABASE_ENGINE,
        'HOST': tenant[5],
        'NAME': tenant[2],
        'USER': tenant[3],
        'PASSWORD': tenant[4],
        # 'OPTIONS': {'init_command': "SET storage_engine=INNODB", 'init_command': "SET sql_mode=STRICT_TRANS_TABLES"},
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# STATIC_URL = 'static/'
STATICFILES_LOCAL = os.path.join(BASE_DIR, 'static_files/')
print(STATICFILES_LOCAL)

AWS_ACCESS_KEY_ID = Config.AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY = Config.AWS_SECRET_ACCESS_KEY
AWS_STORAGE_BUCKET_NAME = Config.AWS_STORAGE_BUCKET_NAME
AWS_S3_REGION_NAME = Config.AWS_S3_REGION_NAME
AWS_S3_CUSTOM_DOMAIN = Config.AWS_S3_CUSTOM_DOMAIN
AWS_DEFAULT_ACL = Config.AWS_DEFAULT_ACL

AWS_S3_OBJECT_PARAMETERS ={
    'CacheControl': 'max-age=86400',
}

AWS_STATIC_LOCATION = 'media/static'
STATICFILES_STORAGE = 'data_ingestion.storage_backends.PublicMediaStorage'
STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, AWS_STATIC_LOCATION)

AWS_PUBLIC_MEDIA_LOCATION = 'media/public/automation_poc/raj'
DEFAULT_FILE_STORAGE = 'data_ingestion.storage_backends.PublicMediaStorage'

AWS_PRIVATE_MEDIA_LOCATION = 'media/private'
PRIVATE_FILE_STORAGE = 'data_ingestion.storage_backends.PrivateMediaStorage'

# Config
client_id = Config.CLIENT_ID
client_secret =Config.CLIENT_SECRET
issuer =Config.ISSUER
token_endpoint =Config.TOKEN_ENDPOINT
redirect_uri = Config.REDIRECT_URI
grant_type =Config.GRANT_TYPE
publickey_endpoint =Config.PUBLICKEY_ENDPOINT


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
